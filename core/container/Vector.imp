(import 'core/control' self)
(import 'core/container/Array')
(import 'core/container/abstract/Sequence')

(set # Sequence)

(def ~ {
	(def r:# self)
	(def r:size 0)
	(def r:buffer (Array:withSize 4))
	(return r)
})


(def at {
	(self:checkIndexBounds (@:at 0))
	(return (self:buffer:at (@:at 0)))
})


(def at= {
	(self:checkIndexBounds (@:at 0))
	(self:buffer:at= (@:at 0) (@:at 1))
})


(def setCapacity {
	(def target (@:at 0))
	(if (target:< self:size) {
		(throw 'cannot set capacity below size')
	})
	(self:buffer:resizeTo target)
})


(def tighten {
	(self:setCapacity self:size)
})


(def expand {
	// set capacity to 2(capacity+1)
	(def p1 (self:buffer:size:+ 1))
	(self:setCapacity (p1:* 2))
})


(def append {
	(if (self:size:>= self:buffer:size) {
		(self:expand)
	})
	(self:size:++)
	(self:at= (self:size:- 1) (@:at 0))
})


(def tightenIfNecessary {
	(if (self:size:< (self:buffer:size:/ 10)) {
		(self:tighten)
	})
})


(def remove {
	(def i (@:at 0))
	(self:checkIndexBounds i)
	(def j (i:+ 1))
	(while {j:< self:size} {
		(self:at= i (self:at j))
		(i:++)
		(j:++)
	})
	(self:size:--)
	(self:tightenIfNecessary)
})


(def removeLast {
	(self:remove (self:lastIndex))
})


(def removeFirst {
	(self:remove (self:lastIndex))
})
