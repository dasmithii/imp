ROUTES

  give route->internal a ImpClosure field which, when evaled,
  returns the real context. if null do regular

  


+ Make subdirectory 'abstract' in 'core/container'

+ Generators + yielding

+ Provide mechanism for creating control structures (which
  handle breaks and continues, etc).

  On that note, implement breaks and continues better.


Reworking GC _collect and _mark

 + might need to make objects marked by default to prevent
   collection of objects created within _collect methods

Make prefix operators work
Make method calls on expressions work
Runtime_executeSourceInContextWithArguments

Make import a method

 + Make it so files can import eachother (lazy execution)
 + Make libraries compile w/o debug symbols. Go faster


 + Maybe optimize loops to re-use scopes


BUG: object litteral not passing correct 'self'

NOW:

 + use <= for return

 + Common ancestor methods

 + Make lexer store token texts contiguously

 + Use varargs on Runtime_callMethod

 + Make imports un-import at end of file.

 + Make importer cache symbols

 + Setup runtime to use init methods in place of clones (like python)

 + Make Number:asString accept format

 + Check arguments on core .imp files

 + string methods

 + CLI module
 + tester module

 + Make control structures builtin?

 + Make address type

 + Make legit ':' operator.

 + Form iterator idioms

 + Add (implements x y) function for interface checking.

 + Fix hashmap.

 + Make regex module

 + Make Go-inspired defer

 + Make break and continue accept arguments to deal with
   nested loops.

 + Protect against circular prototype linkage.

 + Cap slot name sizes

 + Make number type handle infinite precision integers?, binary,
   and hex, as well as the existing double. Magic.

 + Make argument expansion/pass

 + Use standardized hash algo for importer

 


MAJOR:

 + Design and implement standard library.



MEDIUM:

 + Handle exception catch cleanups.
 
 + Replace slot system with legit accessor.

 + Prefix operators...

 + Generators

 + Make composition functions for objects 
     - &=: and in place (intersection)
     - |=: or in place (union)
     - 

 + Make clonable Runtime module for executing sub programs



MINOR:

 + Improve internal module code scanner. Use regex
   or something.




MAYBE:
 
 + Make carrots variable expansion operators?

 + Prototype multiplexing (multiple inheritance).




LATER:
  + Concurrency!!!